<?php
/**
 * Magento
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Academic Free License (AFL 3.0)
 * that is bundled with this package in the file LICENSE_AFL.txt.
 * It is also available through the world-wide-web at this URL:
 * http://opensource.org/licenses/afl-3.0.php
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@magentocommerce.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade Magento to newer
 * versions in the future. If you wish to customize Magento for your
 * needs please refer to http://www.magentocommerce.com for more information.
 *
 * @category    design
 * @package     rwd_default
 * @copyright   Copyright (c) 2014 Magento Inc. (http://www.magentocommerce.com)
 * @license     http://opensource.org/licenses/afl-3.0.php  Academic Free License (AFL 3.0)
 */

/**
 * Product view template
 *
 * @see Mage_Catalog_Block_Product_View
 * @see Mage_Review_Block_Product_View
 */
?>
<?php $_helper = $this->helper('catalog/output'); ?>
<?php $_coreHelper = $this->helper('core');?>
<?php $_product = $this->getProduct(); ?>
<script type="text/javascript">
    var optionsPrice = new Product.OptionsPrice(<?php echo $this->getJsonConfig() ?>);
</script>
<div id="messages_product_view"><?php echo $this->getMessagesBlock()->getGroupedHtml() ?></div>
<div class="product-view">
    <div class="product-essential">
        <form action="<?php echo $this->getSubmitUrl($_product) ?>" method="post" id="product_addtocart_form"<?php if($_product->getOptions()): ?> enctype="multipart/form-data"<?php endif; ?>>
            <?php echo $this->getBlockHtml('formkey') ?>
            <div class="no-display">
                <input type="hidden" name="product" value="<?php echo $_product->getId() ?>" />
                <input type="hidden" name="related_product" id="related-products-field" value="" />
            </div>

            <div class="product-img-box">
                <div class="product-name">
                    <h1><?php echo $_helper->productAttribute($_product, $_product->getName(), 'name') ?></h1>
                </div>
                <?php echo $this->getChildHtml('media') ?>
            </div>

            <div class="product-shop">
                <div class="product-name">
                    <span class="h1"><?php echo $_helper->productAttribute($_product, $_product->getName(), 'name') ?></span>
                </div>

            </br></br>
                <?php 
                    $diamondRates = $_helper->productAttribute($_product, $_product->getRates(), 'rates');
                    $diamondWeight = 0;
                    $daimondRatesArray = explode(',',$diamondRates);
                    foreach ($daimondRatesArray as $daimondRate) {
                        $diamondRateArray = explode('|', $daimondRate);
                        
                        $rateArray = explode('-', $diamondRateArray[0]);
                        
                        $diamondWeight += $rateArray[2];
                    }
                    $diamondCarat = $diamondWeight/(0.2);
                ?>
                <div class="product-desc">
                    <span style="font-size:12px;">set in <span id="set-gold-purity" style="font-weight:bold;"></span><b> Kt </b><span id="set-gold-color" style="font-weight:bold;"></span> Gold</b> (<?php echo $_helper->productAttribute($_product, $_product->getGoldweight(), 'goldweight')?> gms) with <b>Diamonds</b> (<?php echo $diamondCarat;?> Ct,<span style="font-weight:bold;" id="set-diamond-purity"></span>) <span style="font-weight:bold;"><b>Certified by IGI</b></span></span>
                </div>

                <div class="price-info">
                    <?php //echo $this->getPriceHtml($_product); ?>
                    <div class="price">
                        <span style="font-weight:bold;float: left;">Rs .</span>
                        <div id="price"><?php echo number_format($_product->getListingprice(), 0, null, '');?></div>
                    </div>
                    <?php echo $this->getChildHtml('bundle_prices') ?>
                    <?php echo $this->getTierPriceHtml() ?>
                </div>

                <div class="extra-info">
                    <?php echo $this->getReviewsSummaryHtml($_product, 'default', false)?>
                    <?php echo $this->getChildHtml('product_type_availability'); ?>
                </div>

                <?php echo $this->getChildHtml('alert_urls') ?>

                <?php if ($_product->getShortDescription()):?>
                    <div class="short-description">
                        <div class="std"><?php echo $_helper->productAttribute($_product, nl2br($_product->getShortDescription()), 'short_description') ?></div>
                    </div>
                <?php endif;?>

                <?php echo $this->getChildHtml('other');?>

                <?php
                    $this->getChild('price-breakup')->setData("product", $_product);
                    echo $this->getChildHtml('price-breakup');
                ?>
                
                <?php if ($_product->isSaleable() && $this->hasOptions()):?>
                    <?php echo $this->getChildChildHtml('container1', '', true, true) ?>
                <?php endif;?>
                
            </div>

            <div class="add-to-cart-wrapper">
                <?php echo $this->getChildHtml('product_type_data') ?>
                <?php echo $this->getChildHtml('extrahint') ?>

                <?php if (!$this->hasOptions()):?>
                    <div class="add-to-box">
                        <?php if($_product->isSaleable()): ?>
                            <?php echo $this->getChildHtml('addtocart') ?>
                            <?php if( $this->helper('wishlist')->isAllow() || $_compareUrl=$this->helper('catalog/product_compare')->getAddUrl($_product)): ?>
                                <span class="or"><?php echo $this->__('OR') ?></span>
                            <?php endif; ?>
                        <?php endif; ?>
                        <?php echo $this->getChildHtml('addto') ?>
                        <?php echo $this->getChildHtml('sharing') ?>
                    </div>
                    <?php echo $this->getChildHtml('extra_buttons') ?>
                <?php elseif (!$_product->isSaleable()): ?>
                    <div class="add-to-box">
                        <?php echo $this->getChildHtml('addto') ?>
                        <?php echo $this->getChildHtml('sharing') ?>
                    </div>
                <?php endif; ?>
            </div>

            <?php echo $this->getChildHtml('related_products') ?>

            <div class="clearer"></div>
            <?php if ($_product->isSaleable() && $this->hasOptions()):?>
                <?php echo $this->getChildChildHtml('container2', '', true, true) ?>
            <?php endif;?>
        </form>
        <script type="text/javascript">
        //<![CDATA[
        
            /*Code to update product price and price breakup starts*/
            
            $('product_addtocart_form').on('change', '.radio', function(event) {
                
                var basePriceElm = document.getElementById('base-price');
                var price = Number(basePriceElm.value);
                var price = rnd(price,0);
                $$('input[type="radio"]:checked').each(function(c) {
                    var elm = document.getElementById(c.id);
                    var elmPrice = elm.getAttribute('PRICE');
                    price = price + Number(elmPrice);
                    var elmOptionCategory = elm.getAttribute('OPTIONCATEGORY');
                    
                    if(elmOptionCategory == 'Diamond Color & Purity') {
                        diamondCharge = Number(elmPrice);
                        document.getElementById('diamondprice').innerHTML = rnd(diamondCharge,0);
                    }
                    
                    if(elmOptionCategory == 'Gold Purity') {
                        goldCharge = Number(elmPrice);
                        document.getElementById('goldprice').innerHTML = rnd(goldCharge,0);
                    }


                    if(elmOptionCategory == 'Gold Purity') {
                        labelElmId = 'label_'+c.id;
                        var a = document.getElementById(labelElmId).innerHTML;
                        if (a == '14K') {
                            document.getElementById('set-gold-purity').innerHTML = '14';
                            document.getElementById('desc-gold-purity').innerHTML = '14';
                            document.getElementById('breakup-gold-purity').innerHTML = '14';
                            
                            var goldRate14KElm = document.getElementById('goldRate14K');
                            var goldRate14K = Number(goldRate14KElm.value);
                            document.getElementById('breakup-gold-rate-per-gm').innerHTML =goldRate14K;
                        } else {
                            document.getElementById('set-gold-purity').innerHTML = '18';
                            document.getElementById('desc-gold-purity').innerHTML = '18';
                            document.getElementById('breakup-gold-purity').innerHTML = '18';
                            
                            var goldRate18KElm = document.getElementById('goldRate18K');
                            var goldRate18K = Number(goldRate18KElm.value);
                            document.getElementById('breakup-gold-rate-per-gm').innerHTML =goldRate18K;
                        }
                    }
                    
                    if(elmOptionCategory == 'Gold Color') {
                        labelElmId = 'label_'+c.id;
                        var a = document.getElementById(labelElmId).innerHTML;
                        document.getElementById('set-gold-color').innerHTML = a;
                        document.getElementById('desc-gold-color').innerHTML = a;
                        document.getElementById('breakup-gold-color').innerHTML = a;
                    }

                    if(elmOptionCategory == 'Diamond Color & Purity') {
                        labelElmId = 'label_'+c.id;
                        var a = document.getElementById(labelElmId).innerHTML;
                        document.getElementById('set-diamond-purity').innerHTML = a;
                        document.getElementById('desc-diamond-purity').innerHTML = a;
                    }

                });
                
                var laborThresholdElm = document.getElementById('laborthreshold');
                var laborThreshold = Number(laborThresholdElm.value);
                

                var totalWeightElm = document.getElementById('totalweight');
                var totalWeight = Number(totalWeightElm.value);
                if(totalWeight > laborThreshold) {
                    var laborRateElm = document.getElementById('laborrate');
                    var laborRate = Number(laborRateElm.value);
                    var labor = laborRate*totalWeight;
                    price = price + labor;
                    document.getElementById('laborprice').innerHTML = rnd(labor,0);
                    document.getElementById('breakup-labor-charges').innerHTML = rnd(labor,0);
                } else {
                    var laborFixedChargeElm = document.getElementById('laborfixedcharge');
                    var laborFixedCharge = Number(laborFixedChargeElm.value);
                    price = price + laborFixedCharge;
                    document.getElementById('laborprice').innerHTML = rnd(laborFixedCharge,0);
                    document.getElementById('breakup-labor-charges').innerHTML = rnd(laborFixedCharge,0);
                }
                
                var taxPercentElm = document.getElementById('taxpercent');
                var tax = Number(taxPercentElm.value);
                tax = price*(tax/100);
                
                document.getElementById('vatprice').innerHTML = rnd(tax,0);
                document.getElementById('breakup-vat-charges').innerHTML = rnd(tax,0);
                
                price = price + tax;
                document.getElementById('sum').value = rnd(price,0);
                document.getElementById('price').innerHTML = rnd(price,0);
            });
            

            var listingPriceElm = document.getElementById('listingprice');
            var listingPrice = Number(listingPriceElm.value);
            document.getElementById('sum').value = rnd(listingPrice,0);
            var m = listingPrice.toFixed(0).replace(/./g, function(c, i, a) {
                return i && c !== "." && ((a.length - i) % 3 === 0) ? ',' + c : c;
            });
            
            document.getElementById('price').innerHTML = rnd(listingPrice,0);
            $$('input[type="radio"]:checked').each(function(c){
                
                var elm = document.getElementById(c.id);
                var elmPrice = elm.getAttribute('PRICE');
                var elmOptionCategory = elm.getAttribute('OPTIONCATEGORY');
                if(elmOptionCategory == 'Diamond Certificate') {
                    var diamondChargeElm = document.getElementById('diamondcharge');
                    var diamondCharge = Number(diamondChargeElm.value);
                    diamondCharge = diamondCharge + Number(elmPrice);
                    document.getElementById('diamondprice').innerHTML = rnd(diamondCharge,0);
                }

                if(elmOptionCategory == 'Gold Purity') {
                    labelElmId = 'label_'+c.id;
                    var a = document.getElementById(labelElmId).innerHTML;
                    if (a == '14K') {
                        document.getElementById('set-gold-purity').innerHTML = '14';
                    } else {
                        document.getElementById('set-gold-purity').innerHTML = '18';
                    }
                }
                
                if(elmOptionCategory == 'Gold Color') {
                    labelElmId = 'label_'+c.id;
                    var a = document.getElementById(labelElmId).innerHTML;
                    document.getElementById('set-gold-color').innerHTML = a;
                }

                if(elmOptionCategory == 'Diamond Color & Purity') {
                    labelElmId = 'label_'+c.id;
                    var a = document.getElementById(labelElmId).innerHTML;
                    document.getElementById('set-diamond-purity').innerHTML = a;
                }
                
            });
            
            
            function rnd(x,p) {
                var a=[1,10,100,1000,10000,100000,1000000,10000000,100000000,1000000000,10000000000];
                return Math.round(x*a[p])/a[p];
            }
            
            
            function setCookie(c_name,value)
            {
                document.cookie=c_name + "=" + value + "; path=" + Mage.Cookies.path + "; domain=" + Mage.Cookies.domain;
            }
            
            /*Code to update product price and price breakup ends*/
            var productAddToCartForm = new VarienForm('product_addtocart_form');
            productAddToCartForm.submit = function(button, url) {
                if (this.validator.validate()) {
                    var form = this.form;
                    var oldUrl = form.action;
                    var sum = document.getElementById('sum').value;
                    setCookie('sum',sum);
                    if (url) {
                       form.action = url;
                    }
                    var e = null;
                    try {
                        this.form.submit();
                    } catch (e) {
                    }
                    this.form.action = oldUrl;
                    if (e) {
                        throw e;
                    }

                    if (button && button != 'undefined') {
                        button.disabled = true;
                    }
                }
            }.bind(productAddToCartForm);

            productAddToCartForm.submitLight = function(button, url){
                if(this.validator) {
                    var nv = Validation.methods;
                    delete Validation.methods['required-entry'];
                    delete Validation.methods['validate-one-required'];
                    delete Validation.methods['validate-one-required-by-name'];
                    // Remove custom datetime validators
                    for (var methodName in Validation.methods) {
                        if (methodName.match(/^validate-datetime-.*/i)) {
                            delete Validation.methods[methodName];
                        }
                    }

                    if (this.validator.validate()) {
                        if (url) {
                            this.form.action = url;
                        }
                        this.form.submit();
                    }
                    Object.extend(Validation.methods, nv);
                }
            }.bind(productAddToCartForm);
        //]]>
        </script>
    </div>

    <div class="product-collateral toggle-content tabs">
        <?php if ($detailedInfoGroup = $this->getChildGroup('detailed_info', 'getChildHtml')):?>
            <dl id="collateral-tabs" class="collateral-tabs">
                <?php foreach ($detailedInfoGroup as $alias => $html):?>
                    <dt class="tab"><span><?php echo $this->escapeHtml($this->getChildData($alias, 'title')) ?></span></dt>
                    <dd class="tab-container">
                        <div class="tab-content"><?php echo $html ?></div>
                    </dd>
                <?php endforeach;?>
            </dl>
        <?php endif; ?>
    </div>

    <?php echo $this->getChildHtml('upsell_products') ?>
    <?php echo $this->getChildHtml('product_additional_data') ?>

</div>
